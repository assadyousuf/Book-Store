# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from typing import Text
from PyQt5 import QtCore, QtGui, QtWidgets,uic
import sys
from main import cartObject
from main import program
from support import Ui_MainWindow
from tabulate import tabulate


#Ui_MainWindow, QtBaseClass = uic.loadUiType("GUI.ui")
 
p = program() 
class MyApp(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
        
        #Start Page
        self.LogInButton.clicked.connect(lambda:self.switchTo("LogIn Page"))
        self.createAccountButton.clicked.connect(lambda: self.switchTo("Create Account Page"))
        self.quitButton.clicked.connect(lambda: sys.exit() )

        #Create Account Page
        self.pushButton_3.clicked.connect(lambda: self.createAccountFunc(self.createUsernameInput.text(),self.createPasswordInput.text()))
        self.pushButton.clicked.connect(lambda: [self.switchTo("Start Page") ,self.createUsernameInput.clear() , self.createPasswordInput.clear()])
        

        #logIn Page
        self.pushButton_4.clicked.connect(lambda: self.switchTo("Start Page"))
        self.pushButton_2.clicked.connect(lambda: self.logIn())

        #MainMenu
        self.filterByBooksButton.clicked.connect(lambda: self.switchTo("Filter By Book Page"))
        #self.displayCartButton.clicked.connect(lambda: self.displayCart())
        self.addBookToCartButton.clicked.connect(lambda: self.addBookToCart())
        self.checkoutButtonMainMenu.clicked.connect(lambda: self.setupCheckoutPage())
        self.LogOutButton.clicked.connect(lambda: self.logOut())
        self.deleteAccountButton.clicked.connect(lambda: self.deleteAccount())
        self.checkoutButtonCheckout.clicked.connect(lambda: self.checkoutCart())
        self.orderHistoryButton.clicked.connect(lambda: self.switchToOrderHistoryPage())
        self.deleteFromCartButton.clicked.connect(lambda: self.deleteFromCart())
       

        #Filter Page
        self.genreButton.clicked.connect(lambda: self.displayByFilter(self.genreButton.text()) )
        self.seriesButon.clicked.connect(lambda: self.displayByFilter(self.seriesButon.text()) )
        self.isbnButton.clicked.connect(lambda: self.displayByFilter(self.isbnButton.text()) )
        self.publisherButton.clicked.connect(lambda: self.displayByFilter(self.publisherButton.text()) )
        self.nameButton.clicked.connect(lambda: self.displayByFilter(self.nameButton.text()) )
        self.backFilterButton.clicked.connect(lambda: self.setupMainMenu())
        

        #checkout Page
        self.backButtonChcekoutPage.clicked.connect(lambda: self.setupMainMenu() )


        #order history page
        self.backOrderHistoryButton.clicked.connect(lambda: [self.setupMainMenu()] )


    def cleanUpOrderHistoryPage(self):
         while self.orderTable.rowCount() > 0: 
             self.orderTable.removeRow(0)
        
        
    def switchTo(self,page):
        if page == "Main Menu":
            self.stackedWidget.setCurrentIndex(1)
        elif page == "LogIn Page":
            self.usernameInput.clear();self.passwordInput.clear();self.label.setText("Enter Username and Password")
            self.stackedWidget.setCurrentIndex(2)    
        elif page == "Filter By Book Page":
            self.stackedWidget.setCurrentIndex(3)
        elif page == "Checkout":
            self.stackedWidget.setCurrentIndex(4)
        elif page == "Start Page":
            self.stackedWidget.setCurrentIndex(0) 
        elif page == "Create Account Page":
            self.createUsernameInput.clear(); self.createPasswordInput.clear(); self.createLabel.setText("Please enter username and password for new account")
            self.stackedWidget.setCurrentIndex(5)
        elif page == "Order History Page":
            self.stackedWidget.setCurrentIndex(6)               

    def logIn(self):
        result = p.logIn(self.usernameInput.text(),self.passwordInput.text()); 
        if result == False:
            self.label.setText("Username and Password are not valid")
            return

        self.setupMainMenu()    
        self.usernameInput.clear(); self.passwordInput.clear()

    def setupMainMenu(self):
        if len(p.cart) > 0:
            self.displayCart(self.cartTableMainMenu)
            self.cartTableMainMenu.resizeColumnsToContents() 
        else:
            self.cartTableMainMenu.clear()

        self.setItemsInComboBox()
        self.userSatusLabel.setText("User: "+ p.current_username)
        self.switchTo("Main Menu");

        
          
    def displayByFilter(self,text):
        if text == "Genre":
            table = p.FilterBooksBy("Genre")
            self.tableWidget.setColumnCount(len(table[0])); self.tableWidget.setRowCount(len(table)); rows=len(table); columns=len(table[0]);
            for i in range(0,rows):
                for j in range(0,columns):
                    self.tableWidget.setItem(i,j,QtWidgets.QTableWidgetItem((table[i][j])))

        elif text == "ISBN":
            table = p.FilterBooksBy("ISBN")
            self.tableWidget.setColumnCount(len(table[0])); self.tableWidget.setRowCount(len(table)); rows=len(table); columns=len(table[0]);
            for i in range(0,rows):
                for j in range(0,columns):
                    self.tableWidget.setItem(i,j,QtWidgets.QTableWidgetItem((table[i][j])))      

        elif text == "Series":
            table = p.FilterBooksBy("Series")
            self.tableWidget.setColumnCount(len(table[0])); self.tableWidget.setRowCount(len(table)); rows=len(table); columns=len(table[0]);
            for i in range(0,rows):
                for j in range(0,columns):
                    self.tableWidget.setItem(i,j,QtWidgets.QTableWidgetItem((table[i][j])))  

        elif text == "Publisher":
            table = p.FilterBooksBy("Publisher")
            self.tableWidget.setColumnCount(len(table[0])); self.tableWidget.setRowCount(len(table)); rows=len(table); columns=len(table[0]);
            for i in range(0,rows):
                for j in range(0,columns):
                    self.tableWidget.setItem(i,j,QtWidgets.QTableWidgetItem((table[i][j])))                      

        elif text == "Name":
            table = p.FilterBooksBy("Name")
            self.tableWidget.setColumnCount(len(table[0])); self.tableWidget.setRowCount(len(table)); rows=len(table); columns=len(table[0]);
            for i in range(0,rows):
                for j in range(0,columns):
                    self.tableWidget.setItem(i,j,QtWidgets.QTableWidgetItem((table[i][j])))  

        self.tableWidget.resizeColumnsToContents()           

    def displayCart(self,table):
        cartList =  []
        if len(p.cart) > 0:
            for book in p.cart:
                cartList.append((str(book.name),str(book.price)))   

        numOfBooks = len(cartList); table.setRowCount(len(cartList)); 

        if len(p.cart) > 0:
            table.setColumnCount(len(cartList[0]))

        for i in range(0,numOfBooks):
            for j in range(0,2):
                table.setItem(i,j,QtWidgets.QTableWidgetItem((cartList[i][j])))

        rowpositon=table.rowCount()
        table.insertRow(rowpositon)
        
        table.setItem(rowpositon,0,QtWidgets.QTableWidgetItem("Total"))
        table.setItem(rowpositon,1,QtWidgets.QTableWidgetItem(str(p.currentTotal)))

        table.resizeColumnsToContents()

        



    def setItemsInComboBox(self):
        table = p.FilterBooksBy("Name")
        for book in table:
            self.comboBox.addItem(book[0])                

    def addBookToCart(self):
        table = p.SearchForBooks(str(self.comboBox.currentText()))
        p.AddBookToCart(str(self.comboBox.currentText()))

        self.displayCart(self.cartTableMainMenu)

        #rowPosition = self.cartTableMainMenu.rowCount()
        #self.cartTableMainMenu.insertRow(rowPosition)

        #for book in table:
            #self.cartTableMainMenu.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(table[0][0]))
            #self.cartTableMainMenu.setItem(rowPosition,1,QtWidgets.QTableWidgetItem(table[0][1]))

    def deleteFromCart(self):
        
        p.deleteFromCart(str(self.comboBox.currentText()))

        self.displayCart(self.cartTableMainMenu)


    def setupCheckoutPage(self):
        if len(p.cart) > 0:
            self.displayCart(self.tableWidget_2)

        self.switchTo("Checkout")

    def logOut(self):
        p.LogOut()
        self.switchTo("Start Page")
        self.cleanUpOrderHistoryPage()
            
    def createAccountFunc(self,username,password):
        if username.isspace()==True or password.isspace()==True:
            self.createLabel.setText("Passwords and Usernames cannot be made of whitespace")
            self.createUsernameInput.clear(); self.createPasswordInput.clear()
            return
        if username == "" or password == "":
            self.createLabel.setText("Passwords and Usernames cannot be empty")
            self.createUsernameInput.clear(); self.createPasswordInput.clear()
            return

        result = p.CreateAccount(username,password)
        self.createLabel.setText("Account Created")

    def deleteAccount(self):
        p.deleteAccount()
        self.switchTo("Start Page")

    def checkoutCart(self):
        result = p.Checkout(self.adressInput.text())
        if result == False:
            self.label_2.setText("Cart is empty. Please add books to cart to checkout")
            return
        if result == True:
            self.tableWidget_2.clear()
            self.cartTableMainMenu.clear()
            while(self.tableWidget_2.rowCount() > 0):
                self.tableWidget_2.removeRow(0)
            while(self.cartTableMainMenu.rowCount() > 0 ):
                self.cartTableMainMenu.removeRow(0)   

    def switchToOrderHistoryPage(self):
        table = p.returnOrderTable()
        if table == False:
            self.switchTo("Order History Page")
            return

        #model = QtGui.QStandardItemModel()
        #model.setHorizontalHeaderLabels(['Order ID','Address','Books','Total'])
        #self.orderTable.setModel(model)




        self.orderTable.setColumnCount(len(table[0])); self.orderTable.setRowCount(len(table)+1);rows=len(table); columns=len(table[0]);


        self.orderTable.setItem(0,0,QtWidgets.QTableWidgetItem("Order ID"))
        self.orderTable.setItem(0,1,QtWidgets.QTableWidgetItem("Address"))
        self.orderTable.setItem(0,2,QtWidgets.QTableWidgetItem("Books")) 
        self.orderTable.setItem(0,3,QtWidgets.QTableWidgetItem("Total"))
        self.orderTable.setItem(0,4,QtWidgets.QTableWidgetItem("Username"))


        for i in range(0,rows):
            for j in range(0,columns):
                if type(table[i][j]) != str:
                   self.orderTable.setItem(i+1,j,QtWidgets.QTableWidgetItem((str(table[i][j])))) 
                elif type(table[i][j]) == str:
                    self.orderTable.setItem(i+1,j,QtWidgets.QTableWidgetItem((table[i][j])))       


       # self.orderTable.setHorizontalHeaderLabels(("Order ID","Address","Books","Total","Username"))
       
        self.orderTable.resizeColumnsToContents()
        self.switchTo("Order History Page")
        
   


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MyApp()
    window.show()
    sys.exit(app.exec_())


